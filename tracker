#! /usr/bin/perl

use strict;
use warnings;

use JSON;
use IO::Handle;
use Socket;
use File::Find;
use Convert::Bencode_XS qw(bencode bdecode);
use Digest::SHA1 qw(sha1);

use vars qw($PROTOCOL);
$PROTOCOL = 0;

my $version='0.06';

my $cfg=$ARGV[0] || 'tracker.cfg';
my %config;
{
  open (IN,"<$cfg") || die "no config file $cfg\n";
  binmode IN;
  my $st=join('',<IN>);
  close IN;
  if ($st) {
    %config=%{decode_json($st)};
  }
  my $d=0;
  foreach my $re (qw(port statefile interval allowed expiry)) {
    unless (exists $config{$re}) {
      warn "$re undefined in config\n";
      $d=1;
    }
  }
  if ($d) {
    die "Aborting startup\n";
  }
}

{
  package NoBrakeTracker;

  use HTTP::Server::Simple::CGI::PreFork;
  use base qw(HTTP::Server::Simple::CGI::PreFork);
  use JSON;
  use List::Util qw(shuffle);
  use Convert::Bencode_XS qw(bencode bdecode);
  use Regexp::IPv6 qw($IPv6_re);
  use Net::IPv6Addr;
  use Socket;

  use vars qw($PROTOCOL);
  $PROTOCOL = 0;

  my $IPv4_re='\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}';

  my %dispatch = (
    '/announce' => \&resp_tracker
  );

  if (!exists $config{noscrape}) {
    $dispatch{'/scrape'}=\&resp_scrape;
  }

  if (!exists $config{nostats}) {
    $dispatch{'/stats'}=\&resp_stats;
  }

  my %state;
  my %config;

  sub config {
    my $self=shift;
    my $c=shift;
    %config=%{$c};
  }

  sub handle_request {
    my $self = shift;
    my $cgi  = shift;

    my $path = $cgi->path_info();
    my $handler = $dispatch{$path};

    if (ref($handler) eq "CODE") {
      $handler->($cgi);
    } else {
      simple_return($cgi,404,'Not found');
    }
  }

  sub resp_tracker {
    my $cgi  = shift;
    return if !ref $cgi;

    my %data=map{$_ => scalar $cgi->param($_)} $cgi->param;
    map {delete $data{$_}} qw(ip4 port4 ip6 port6);
    $data{connip}=$cgi->remote_host;
    if (exists $data{ipv6} && $data{ipv6} =~ /^($IPv6_re)(?::(\d+))?/) {
      # valid ipv6 parameter given
      $data{ip6}=$1;
      $data{port6}=$2 || $data{port};
    } elsif ($data{connip} =~ /^$IPv6_re$/) {
      # no valid ipv6, but have v6 connection source
      $data{ip6}=$data{connip};
      $data{port6}=$data{port};
    }
    if (exists $data{ip} && $data{ip} =~ /^$IPv4_re$/) {
      # valid ipv4 parameter given
      $data{ip4}=$data{ip};
      $data{port4}=$data{port};
    } elsif (exists $data{ipv4} && $data{ipv4} =~ /^($IPv4_re)(?::(\d+))?/) {
      # valid ip parameter given (standard BT)
      $data{ip4}=$1;
      $data{port4}=$2 || $data{port};
    } elsif ($data{connip} =~ /^$IPv4_re$/) {
      # IPv4 connection source
      $data{ip4}=$data{connip};
      $data{port4}=$data{port};
    }
    if (!exists $data{ip4} && $data{ip6} =~ /^::ffff:($IPv4_re)$/) {
      # if we've bound v6, v4 source addresses will look like this
      $data{ip4}=$1;
      $data{port4}=$data{port6};
    }
    unless (exists $data{numwant}) {
      $data{numwant}=50;
    }
    if (my $c=$cgi->user_agent) {
      $data{user_agent}=$c;
    }

    my $log=join(' ','client',
		     $data{connip},
                     main::hexify($data{peer_id}),
                     $data{event} || 'no_event');

    my $sockfile="socket.$config{parent}";
    my $sock = IO::Handle->new or die "IO::Handle->new: $1";

    if (!-e $sockfile ||
        !socket($sock, AF_UNIX, SOCK_STREAM, $PROTOCOL)) {
        die "child socket to parent failed $!";
    }
    my $tries=0;
    while (!connect($sock, sockaddr_un($sockfile))) {
      sleep(1);
      if($tries++>10) {
        die "parent unconnectable at $$\n";
      }
    }
    $sock->autoflush;
    $sock->blocking(1);
    $sock->print(encode_json({mode => 'tracker',log => $log,pid => $$,data => \%data})."\n\n");
    my $j='';
    my $t=1;
    do {
      $t=$sock->getline;
      chomp $t;
      $j.=$t;
    } while ($t);

    my $resp=decode_json($j);
    if ($resp->{mode} eq 'be') {
      bencoded_return($cgi,$resp->{http},$resp->{text},$resp->{data});
    } else {
      my $stateih=$resp->{data};
      my %out=(interval => $config{interval},
               complete => 0,
               incomplete => 0);
      my @seeds;
      foreach my $p (keys %{$stateih->{peer}}) {
        if (!exists $stateih->{peer}{$p}{left} || $stateih->{peer}{$p}{left}==0) {
          $out{complete}++;
          push @seeds,$p;
        } else {
          $out{incomplete}++;
        }
      }
      my $peers=$stateih->{peer};
      my $excess=(scalar keys %{$peers}) - $data{numwant};
      if ($excess > 0 && $data{left}==0) {
        # you want fewer peers than I have and you're a seeder
        # let's trim some of the other seeds first
        @seeds=shuffle @seeds;
        while ($excess>0 && @seeds) {
          delete $peers->{pop @seeds};
          $excess--;
        }
      }
      if ($excess > 0) {
        # you still want fewer peers than I have; I'll drop them randomly.
        my @k=shuffle keys %{$peers};
        while ($excess>0 && %{$peers}) {
          delete $peers->{pop @k};
          $excess--;
        }
      }
      if (exists $data{compact} && $data{compact}==1) {
        my $p4='';
        my $p6='';
        foreach my $p (keys %{$peers}) {
          if (exists $peers->{$p}{ip4}) {
            $p4 .= pack('C*',split /\./,$peers->{$p}{ip4});
            $p4 .= pack('n',$peers->{$p}{port4});
          }
          if (exists $peers->{$p}{ip6}) {
            my $ip=Net::IPv6Addr->new($peers->{$p}{ip6});
            $p6 .= pack('n8',$ip->to_intarray);
            $p6 .= pack('n',$peers->{$p}{port6});
          }
        }
        if ($p4) {
          $out{peers}=$p4;
        }
        if ($p6) {
          $out{peers6}=$p6;
        }
      } else {
        my @p;
        foreach my $p (keys %{$peers}) {
          if (exists $peers->{$p}{ip4}) {
            push @p,{'peer id' => $p,
                     ip        => $peers->{$p}{ip4},
                     port      => $peers->{$p}{port4}};
          }
          if (exists $peers->{$p}{ip6}) {
            push @p,{'peer id' => $p,
                     ip        => $peers->{$p}{ip6},
                     port      => $peers->{$p}{port6}};
          }
        }
        if (@p) {
          $out{peers}=\@p;
        }
      }
      if ($data{connip} =~ /^$IPv4_re$/) {
        $out{'external ip'}=pack('C*',split /\./,$data{connip});
      }

      print "HTTP/1.0 200 OK\r\n",
            $cgi->header('text/plain'),
            bencode(\%out);
    }
  }

  sub resp_scrape {
    my $cgi  = shift;
    return if !ref $cgi;

    my %data=map{$_ => scalar $cgi->param($_)} $cgi->param;
    my $log=join(' ','scrape',
		     $cgi->remote_host);

    my $sockfile="socket.$config{parent}";
    my $sock = IO::Handle->new or die "IO::Handle->new: $1";

    if (!-e $sockfile ||
        !socket($sock, AF_UNIX, SOCK_STREAM, $PROTOCOL)) {
        die "child socket to parent failed $!";
    }
    my $tries=0;
    while (!connect($sock, sockaddr_un($sockfile))) {
      sleep(1);
      if($tries++>10) {
        die "parent unconnectable at $$\n";
      }
    }
    $sock->autoflush;
    $sock->blocking(1);
    $sock->print(encode_json({mode => 'scrape',log => $log,pid => $$,data => \%data})."\n\n");
    my $j='';
    my $t=1;
    do {
      $t=$sock->getline;
      chomp $t;
      $j.=$t;
    } while ($t);

    my $resp=decode_json($j);

    print "HTTP/1.0 200 OK\r\n",
          $cgi->header('text/plain'),
          bencode($resp->{data});
  }

  sub resp_stats {
    my $cgi  = shift;
    return if !ref $cgi;

    my %data=map{$_ => scalar $cgi->param($_)} $cgi->param;
#    print $fh join(' ',scalar localtime,
#                       $mode,
#		       $cgi->remote_host),"\n";
    my $log=join(' ','stats',
		     $cgi->remote_host);

    my $sockfile="socket.$config{parent}";
    my $sock = IO::Handle->new or die "IO::Handle->new: $1";

    if (!-e $sockfile ||
        !socket($sock, AF_UNIX, SOCK_STREAM, $PROTOCOL)) {
        die "child socket to parent failed $!";
    }
    my $tries=0;
    while (!connect($sock, sockaddr_un($sockfile))) {
      sleep(1);
      if($tries++>10) {
        die "parent unconnectable at $$\n";
      }
    }
    $sock->autoflush;
    $sock->blocking(1);
    $sock->print(encode_json({mode => 'stats',log => $log,pid => $$,data => \%data})."\n\n");
    my $j='';
    my $t=1;
    do {
      $t=$sock->getline;
      chomp $t;
      $j.=$t;
    } while ($t);

    my $resp=decode_json($j);
    my $state=$resp->{data};
    my @ih;
    if (exists $data{info_hash}) {
      if (exists $state->{$data{info_hash}}) {
        @ih=($data{info_hash});
      }
    } else {
      @ih=keys %{$state};
    }
    my @ik=map {lc($state->{$ih[$_]}{name})} (0..$#ih);
    my @ii=sort {$ik[$a] cmp $ik[$b]} (0..$#ih);
    @ih=map {$ih[$ii[$_]]} (0..$#ih);
    my @c1;
    my @c2;
    foreach my $digest (@ih) {
      my $sd=$state->{$digest};
      my $hd=main::hexify($digest);

      my %info=(complete => 0,
                incomplete => 0,
                downloaders => 0);

      push @c2,$cgi->h2($cgi->a({name => $hd},$sd->{name}));
      my @r2;
      while (my ($k,$v) = each %{$sd->{peer}}) {
        my $complete=int(100*(1-$v->{left}/$sd->{size}));
        if ($complete<0) {
          $complete=0;
        }
        if ($complete>100) {
          $complete=100;
        }
        my %ip;
        foreach my $k (qw(connip ip4 ip6)) {
          if (exists $v->{$k}) {
            $ip{$v->{$k}}=1;
          }
        }
        my $ip=join('/',keys %ip);
        push @r2,$cgi->td([$ip,
                           $complete,
                           $v->{uploaded},
                           $v->{downloaded},
                           $v->{user_agent}]);

        if ($v->{left}==0) {
          $info{complete}++;
        } else {
          $info{incomplete}++;
        }
      }
      my $href;
      if (@r2) {
        $href=$cgi->a({href => "#$hd"},$sd->{name});
        push @c2,$cgi->table($cgi->Tr(\@r2));
      } else {
        $href=$sd->{name};
      }
      push @c1,$cgi->td([$href,
                         $hd,
                         $sd->{repsize},
                         'S:'.$info{complete},
                         'L:'.$info{incomplete},
                         'C:'.$sd->{completed}]);
    }

    print "HTTP/1.0 200 OK\r\n",
          $cgi->header('text/html'),
          $cgi->start_html,
          $cgi->table($cgi->Tr(\@c1)),
          @c2,
          $cgi->end_html;
  }

  sub simple_return {
    my ($cgi,$status,$text)=@_;
    print "HTTP/1.0 $status $text\r\n",
          $cgi->header,
          $cgi->start_html($text),
          $cgi->h1($text),
          $cgi->end_html;
  }

  sub bencoded_return {
    my ($cgi,$status,$text,$hash)=@_;
    print "HTTP/1.0 $status $text\r\n",
          $cgi->header('text/plain'),
          bencode($hash);
  }

  sub print_banner {
  }

}

my $nbt = NoBrakeTracker->new($config{port});
if (exists $config{ip}) {
  $nbt->host($config{ip});
}
if (exists $config{family} && $config{family} eq 'AF_INET6') {
  $nbt->family(Socket::AF_INET6);
}
$config{parent}=$$;
my $fh;
if (exists $config{logfile}) {
  open ($fh,">>$config{logfile}") || die "Can't open logfile $config{logfile}\n";
} else {
  $fh=*STDERR;
}
autoflush $fh 1;
print $fh join(' ',scalar localtime,
                   'startup'),"\n";
my %state;
my %peers;
$nbt->config(\%config);
&scan;

$SIG{INT}=$SIG{KILL}=$SIG{HUP}=$SIG{QUIT}=\&shutdown;

my $sockfile="socket.$$";
if (-e $sockfile) {
  unlink $sockfile || die "persistent $sockfile\n";
}
socket(INBOUND,AF_UNIX, SOCK_STREAM, $PROTOCOL)
      || die "Error with Socket: !$\n";
bind(INBOUND, sockaddr_un($sockfile))
    || die "Error Binding $sockfile: $!\n";
listen(INBOUND, 1024) || die "Error Listening: $!\n";

my $pid=$nbt->background(prefork => 1);

my $talk = IO::Handle->new;

$SIG{INT}=$SIG{KILL}=$SIG{HUP}=$SIG{QUIT}=\&shutdown;

while (1) {
  accept($talk, INBOUND) || die "Error Accepting: $!\n";
   # disable I/O buffering just in case
  $talk->autoflush;
   # while the parent keeps sending data, we keep responding..
  my $data='';
  my $t=1;
  do {
    $t=$talk->getline;
    chomp $t;
    $data.=$t;
  } while ($t);
  my $r=decode_json($data);
  my %out;
  if (exists $r->{log}) {
    print $fh "$r->{log}\n";
  }
  if ($r->{mode} eq 'tracker') {
    if (!exists $r->{data}{peer_id} || !exists $r->{data}{info_hash}) {
      %out=(mode => 'be',
            http => 400,
            text => 'Bad Request',
            data => {'failure reason' => 'What?'});
    } elsif ($config{allowed} ne '*' && !exists $state{$r->{data}{info_hash}}) { # valid hash
      %out=(mode => 'be',
            http => 403,
            text => 'Forbidden',
            data => {'failure reason' => 'No such torrent'});
    } else {
      if (exists $state{$r->{data}{info_hash}}{peer}{$r->{data}{peer_id}}) { # we've seen you before
        if (exists $state{$r->{data}{info_hash}}{peer}{$r->{data}{peer_id}}{left} &&
            $state{$r->{data}{info_hash}}{peer}{$r->{data}{peer_id}}{left} > 0 &&
            exists $r->{data}{left} &&
            $r->{data}{left} == 0) { # but you're now seeding
          $state{$r->{data}{info_hash}}{completed}++;
        }
      }
      $r->{data}{lastupdate}=time;
      if (exists $r->{data}{event} &&
          $r->{data}{event} eq 'stopped') {
        delete $state{$r->{data}{info_hash}}{peer}{$r->{data}{peer_id}};
	delete $peers{$r->{data}{info_hash}}{$r->{data}{peer_id}};
      } else {
        $state{$r->{data}{info_hash}}{peer}{$r->{data}{peer_id}}=$r->{data};
	$peers{$r->{data}{info_hash}}{$r->{data}{peer_id}}={};
	if (exists $r->{data}{ip6}) {
	  $peers{$r->{data}{info_hash}}{$r->{data}{peer_id}}{ip6}=
	    $r->{data}{ip6};
	  $peers{$r->{data}{info_hash}}{$r->{data}{peer_id}}{port6}=
	    $r->{data}{port6};
	}
	if (exists $r->{data}{ip4}) {
	  $peers{$r->{data}{info_hash}}{$r->{data}{peer_id}}{ip4}=
	    $r->{data}{ip4};
	  $peers{$r->{data}{info_hash}}{$r->{data}{peer_id}}{port4}=
	    $r->{data}{port4};
	}
      }
      while (my ($k,$v)=each %{$state{$r->{data}{info_hash}}{peer}}) {
        if ($v->{lastupdate}+$config{expiry} < time) {
          delete $peers{$r->{data}{info_hash}}{$k};
          delete $state{$r->{data}{info_hash}}{peer}{$k};
        }
      }
      %out=(mode => 'work',
            data => $peers{$r->{data}{info_hash}});
    }
  } elsif ($r->{mode} eq 'scrape') {
    my $data;
    my @ih;
    if (exists $r->{data}{info_hash}) {
      if (exists $state{$r->{data}{info_hash}}) {
        @ih=($r->{data}{info_hash});
      } else {
        
      }
    } else {
      @ih=keys %state;
    }
    foreach my $digest (@ih) {
      if (exists $state{$digest}{secret} &&
          $state{$digest}{secret}==1 &&
          (!exists $r->{data}{info_hash} || $r->{data}{info_hash} ne $digest)) {
        # this is a secret torrent - don't report it in the general list
        # but if we have an info_hash request, we still report
      } else {
        my %info=(downloaded => $state{$digest}{completed},
                  complete => 0,
                  incomplete => 0,
                  downloaders => 0,
		  name => $state{$digest}{name});
        foreach my $p (keys %{$state{$digest}{peer}}) {
          if ($state{$digest}{peer}{$p}{left}==0) {
            $info{complete}++;
          } else {
            $info{incomplete}++;
            unless (exists $state{$digest}{peer}{$p}{upload_only} &&
                    $state{$digest}{peer}{$p}{upload_only}==1 &&
                    exists $state{$digest}{peer}{$p}{event} &&
                    exists $state{$digest}{peer}{$p}{event} eq 'paused') {
              $info{downloaders}++;
            }
          }
        }
        $data->{$digest}=\%info;
      }
    }
    %out=(mode => 'work',data => $data);
  } elsif ($r->{mode} eq 'stats') {
    %out=(mode => 'work',data => \%state);
  }
  $talk->print(encode_json(\%out),"\n\n") || die "Child: write failed: $!";
}

sub scan {
  my $cgi  = shift;
  if ($config{allowed} eq '*') {
    return;
  }
  my @tfiles;
  find(sub{
    if (! -d $_ &&
        /\.torrent$/i) {
      push @tfiles,$File::Find::name;
    }
  },$config{allowed});
  my %found;
  foreach my $file (@tfiles) {
    my $secret=0;
    if ($file =~ /\.secret\.torrent$/i) {
      $secret=1;
    }
    open (I,"<$file") || next;
    binmode I;
    my $raw=join('',<I>);
    close I;
    my $d=bdecode($raw);
    my $size=1;
    if (exists $d->{info}{files}) {
      $size=0;
      foreach my $k (@{$d->{info}{files}}) {
        $size+=$k->{length};
      }
    } else {
      $size=$d->{info}{length} || 1;
    }
    my $ih=sha1(bencode($d->{info}));
    my $name=$d->{info}{name} || hexify($ih);
    my $repsize=$size;
    {
      my $s='';
      my @suffix=qw(k M G T P E Z Y);
      while ($repsize > 1024 && @suffix) {
        $repsize/=1024;
        $s=shift @suffix;
      }
      if ($s) {
        $repsize=sprintf('%.1f%s',$repsize,$s);
      }
    }
    $found{$ih}=[$size,$repsize,$secret,$name];
  }
  foreach my $f (keys %found) {
    unless (exists $state{$f}) {
      $state{$f}={size => $found{$f}[0],
                  repsize => $found{$f}[1],
                  completed => 0,
                  name => $found{$f}[3],
                  secret => $found{$f}[2]};
      print $fh join(' ',scalar localtime,
                	 'torrent',
                	 hexify($f),
                	 'added'),"\n";
    }
  }
  foreach my $f (keys %state) {
    unless (exists $found{$f}) {
      delete $state{$f};
      print $fh join(' ',scalar localtime,
                	 'torrent',
			 hexify($f),
                	 'deleted'),"\n";
    }
  }
}

sub shutdown {
  close INBOUND;
  unlink $sockfile;
  kill 2,$pid;
}

sub hexify {
  my $value=shift;
  my $v=int(length($value)/2+0.5);
  my @shorts=unpack("n$v",$value);
  return join('',map {sprintf('%04X',$_)} @shorts);
}
